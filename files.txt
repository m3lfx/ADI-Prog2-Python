Introduction to File Input and Output
When a program needs to save data for later use, it writes the data in a file. The data can be read from the file at a later time.

When a piece of data is read from a file, it is copied from the file into RAM and referenced by a variable.  The term input file is used to describe a file from which data is read. It is called an input file because the program gets input from the file.

Types of Files
In general, there are two types of files: text and binary. A text file contains data that has been encoded as text, using a scheme such as ASCII or Unicode. Even if the file contains numbers,
those numbers are stored in the file as a series of characters. As a result, the file may be opened and viewed in a text editor such as Notepad. A binary file contains data that has not been converted to text. The data that is stored in a binary file is intended only for a program
to read. As a consequence, you cannot view the contents of a binary file with a text editor.

File Access Methods
Most programming languages provide two different ways to access data stored in a file: sequential access and direct access. When you work with a sequential access file, you access data from the beginning of the file to the end of the file. If you want to read a piece of data that is stored at the very end of the file, you have to read all of the data that comes before it—you cannot jump directly to the desired data.

When you work with a direct access file (which is also known as a random access file), you can jump directly to any piece of data in the file without reading the data that comes before it.

Opening a File
You use the open function in Python to open a file. The open function creates a file object and associates it with a file on the disk

file_variable = open(filename, mode)
In the general format:
• file_variable is the name of the variable that will reference the file object.
• filename is a string specifying the name of the file.
• mode is a string specifying the mode (reading, writing, etc.) in which the file will be opened. 
'r' Open a file for reading only. The file cannot be changed or written to.
'w' Open a file for writing. If the file already exists, erase its contents. If it does not exist, create it.
'a' Open a file to be written to. All data written to the file will be appended to its end. If the file does not exist, create it.

Specifying the Location of a File
When you pass a file name that does not contain a path as an argument to the open function, the Python interpreter assumes the file’s location is the same as that of the program. 
If the program is running and it executes the following statement, the file test.txt is created in the same folder:
test_file = open('test.txt', 'w')

If you want to open a file in a different location, you can specify a path as well as a filename in the argument that you pass to the open function. If you specify a path in a string literal (particularly on a Windows computer), be sure to prefix the string with the letter r. Here
is an example: 
test_file = open(r'D:\python_lec\test2.txt', 'w')
This statement creates the file test.txt in the folder D:\python_lec. The r prefix specifies that the string is a raw string. This causes the Python interpreter to read the backslash characters as literal backslashes. Without the r prefix, the interpreter would assume that the backslash characters were part of escape sequences, and an error would occur.

Writing Data to a File
A method is a function that belongs to an object and
performs some operation using that object. Once you have opened a file, you use the file object’s methods to perform operations on the file.

file objects have a method named write that can be used to write data to a
file. Here is the general format of how you call the write method:
file_variable.write(string)

In the format, file_variable is a variable that references a file object, and string is a
string that will be written to the file. The file must be opened for writing (using the 'w' or
'a' mode) or an error will occur.
Let’s assume customer_file references a file object, and the file was opened for writing with the 'w' mode. Here is an example of how we would write the string ‘Charles Pace’ to the file: 
customer_file.write('Charles Pace')

Once a program is finished working with a file, it should close the file. Closing a file disconnects the program from the file.

# This program writes three lines of data
# to a file.
def main():
    # Open a file named philosophers.txt.
    outfile = open('philosophers.txt', 'w')

    # Write the names of three philosphers to the file.
    outfile.write('John Locke\n')
    outfile.write('David Hume\n')
    outfile.write('Edmund Burke\n')

    # Close the file.
    outfile.close()

# Call the main function.
main()

Reading Data From a File
If a file has been opened for reading (using the 'r' mode) you can use the file object’s read method to read its entire contents into memory. When you call the read method, it returns the file’s contents as a string.

# This program reads and displays the contents
# of the philosophers.txt file.
def main():
# Open a file named philosophers.txt.
infile = open('philosophers.txt', 'r')

# Read the file's contents.
file_contents = infile.read()
# Close the file.
infile.close()

# Print the data that was read into memory.
print(file_contents)

# Call the main function.
main()

you can use the readline method to read a line from a file. (A line is simply a string of characters that are terminated with a \n.) The method returns the line as a string, including the \n. Program 6-3 shows how we can use the readline method to read the contents of the philosophers.txt file, one line at a time.

# This program reads the contents of the
# philosophers.txt file one line at a time.
def main():
    # Open a file named philosophers.txt.
    infile = open('philosophers.txt', 'r')

    # Read three lines from the file.
    line1 = infile.readline()
    line2 = infile.readline()
    line3 = infile.readline()
    Close the file.
    infile.close()

    # Print the data that was read into memory.
    print(line1)
    print(line2)
    print(line3)

# Call the main function.
main()

# This program gets three names from the user and writes them to a file.

def main():
    # Get three names.
    print('Enter the names of three friends.')
    name1 = input('Friend #1: ')
    name2 = input('Friend #2: ')
    name3 = input('Friend #3: ')

    # Open a file named friends.txt.
    myfile = open('friends.txt', 'w')

    # Write the names to the file.
    myfile.write(name1 + '\n')
    myfile.write(name2 + '\n')
    myfile.write(name3 + '\n')

    # Close the file.
    myfile.close()
    print('The names were written to friends.txt.')

# Call the main function.
main()

Reading a String and Stripping the Newline from It

The \n serves a necessary purpose inside a file: it separates the items that are stored in the file. However, in many cases, you want to remove the \n from a string after it is read from a file. Each string in Python has a method named rstrip that removes, or “strips,” specific characters from the end of a string. (It is named rstrip because it strips characters
from the right side of a string.)


# This program reads the contents of the philosophers.txt file one line at a time.
def main():
    # Open a file named philosophers.txt.
    infile = open('philosophers.txt', 'r')

    # Read three lines from the file.
    line1 = infile.readline()
    line2 = infile.readline()
    line3 = infile.readline()

    # Strip the \n from each string.
    line1 = line1.rstrip('\n')
    line2 = line2.rstrip('\n')
    line3 = line3.rstrip('\n')

    # Close the file.
    infile.close()

    # Print the data that was read into memory.
    print(line1)
    print(line2)
    print(line3)

# Call the main function.
main()

Appending Data to an Existing File
you can use the 'a' mode to open an output file in append mode, which means
the following.
• If the file already exists, it will not be erased. If the file does not exist, it will be created.
• When data is written to the file, it will be written at the end of the file’s current contents.

myfile = open('friends.txt', 'a')
myfile.write('Matt\n')
myfile.write('Chris\n')
myfile.write('Suze\n')
myfile.close()

Writing and Reading Numeric Data
Strings can be written directly to a file with the write method, but numbers must be converted to strings before they can be written. Python has a built-in function named str that converts a value to a string.

# This program demonstrates how numbers must be converted to strings before they are written to a text file.

def main():
    # Open a file for writing.
    outfile = open('numbers.txt', 'w')

    # Get three numbers from the user.
    num1 = int(input('Enter a number: '))
    num2 = int(input('Enter another number: '))
    num3 = int(input('Enter another number: '))

    # Write the numbers to the file.
    outfile.write(str(num1) + '\n')
    outfile.write(str(num2) + '\n')
    outfile.write(str(num3) + '\n')

    # Close the file.
    outfile.close()
    print('Data written to numbers.txt')

# Call the main function.
main()

# This program demonstrates how numbers that are read from a file must be converted from strings before they are used in a math operation.

def main():
    # Open a file for reading.
    infile = open('numbers.txt', 'r')

    # Read three numbers from the file.
    num1 = int(infile.readline())
    num2 = int(infile.readline())
    num3 = int(infile.readline())

    # Close the file.
    infile.close()

    # Add the three numbers.
    total = num1 + num2 + num3

    # Display the numbers and their total.
    print('The numbers are:', num1, num2, num3)
    print('Their total is:', total)

    # Call the main function.
main()


Using Loops to Process Files
Files usually hold large amounts of data, and programs typically use a loop
to process the data in a file.

# This program prompts the user for sales amounts
# and writes those amounts to the sales.txt file.

def main():
    # Get the number of days.
    num_days = int(input('For how many days do you have sales? '))
    # Open a new file named sales.txt.
    sales_file = open('sales.txt', 'w')

    # Get the amount of sales for each day and write it to the file.
    for count in range(1, num_days + 1):
    # Get the sales for a day.
    sales = float(input('Enter the sales for day #' +
    str(count) + ': '))

    # Write the sales amount to the file.
    sales_file.write(str(sales) + '\n')

    # Close the file.
    sales_file.close()
    print('Data written to sales.txt.')
    
# Call the main function.
main()

Reading a File with a Loop and Detecting the End of the File

# This program reads all of the values in the sales.txt file.

def main():
    # Open the sales.txt file for reading.
    sales_file = open('sales.txt', 'r')

    # Read the first line from the file, but don't convert to a number yet. We still need to test for an empty string.
    line = sales_file.readline()

    # As long as an empty string is not returned from readline, continue processing. 
    while line != '':
        # Convert line to a float.
        amount = float(line)

        # Format and display the amount.
        print(format(amount, '.2f'))

        # Read the next line.
        line = sales_file.readline()

# Close the file.
sales_file.close()

# Call the main function.
main()

Using Python’s for Loop to Read Lines
The Python language also allows you to write a for loop that automatically reads the lines in a file without testing for any special condition that signals the end of the file. The loop does not require a priming read operation, and it automatically stops when the end of the file has been reached.

for variable in file_object:
    statement
    statement
    etc.

# This program uses the for loop to read
# all of the values in the sales.txt file.

def main():
    # Open the sales.txt file for reading.
    sales_file = open('sales.txt', 'r')

    # Read all the lines from the file. 
    for line in sales_file:
    # Convert line to a float.
        amount = float(line)
        # Format and display the amount.
        print(format(amount, '.2f'))

    # Close the file.
    sales_file.close()

# Call the main function.
main()

# This program saves a sequence of video running times to the video_times.txt file.

def main():
    # Get the number of videos in the project.
    num_videos = int(input('How many videos are in the project? '))

    # Open the file to hold the running times.
    video_file = open('video_times.txt', 'w')

    # Get each video's running time and write it to the file.
    print('Enter the running times for each video.')
    for count in range(1, num_videos + 1):
        run_time = float(input('Video #' + str(count) + ': '))
        video_file.write(str(run_time) + '\n')

    # Close the file.
    video_file.close()
    print('The times have been saved to video_times.txt.')

# Call the main function.
main()

# This program the values in the video_times.txt
# file and calculates their total.

def main():
    # Open the video_times.txt file for reading.
    video_file = open('video_times.txt', 'r')

    # Initialize an accumulator to 0.0.
    total = 0.0

    # Initialize a variable to keep count of the videos.
    count = 0

    print('Here are the running times for each video:')

    # Get the values from the file and total them.
    for line in video_file:
        # Convert a line to a float.
        run_time = float(line)
        # Add 1 to the count variable.
        count += 1

        # Display the time.
        print('Video #', count, ': ', run_time, sep='')

        # Add the time to total.
        total += run_time

    # Close the file.
    video_file.close()

    # Display the total of the running times.
    print('The total running time is', total, 'seconds.')


# Call the main function.
main()

Processing Records
The data that is stored in a file is frequently organized in records. A record is a complete set of data about an item, and a field is an individual piece of data within a record.

When data is written to a file, it is often organized into records and fields. A record is a complete set of data that describes one item, and a field is a single piece of data within a record.

# This program gets employee data from the user and
# saves it as records in the employee.txt file.

def main():
    # Get the number of employee records to create.
    num_emps = int(input('How many employee records do you want to create? '))

    # Open a file for writing.
    emp_file = open('employees.txt', 'w')

    # Get each employee's data and write it to the file.
    for count in range(1, num_emps + 1):
        # Get the data for an employee.
        print('Enter data for employee #', count, sep='')
        name = input('Name: ')
        id_num = input('ID number: ')
        dept = input('Department: ')

        # Write the data as a record to the file.
        emp_file.write(name + '\n')
        emp_file.write(id_num + '\n')
        emp_file.write(dept + '\n')

        # Display a blank line.
        print()

    # Close the file.
    emp_file.close()
    print('Employee records written to employees.txt.')

# Call the main function.
main()

# This program displays the records that are in the employees.txt file.

def main():
    # Open the employees.txt file.
    emp_file = open('employees.txt', 'r')

    # Read the first line from the file, which is
    # the name field of the first record.
    name = emp_file.readline()

    # If a field was read, continue processing.
    while name != '':
        # Read the ID number field.
        id_num = emp_file.readline()

        # Read the department field.
        dept = emp_file.readline()

        # Strip the newlines from the fields.
        name = name.rstrip('\n')
        id_num = id_num.rstrip('\n')
        dept = dept.rstrip('\n')

        # Display the record.
        print('Name:', name)
        print('ID:', id_num)
        print('Dept:', dept)
        print()

    # Read the name field of the next record.
    name = emp_file.readline()

    # Close the file.
    emp_file.close()

# Call the main function.
main()

Midnight Coffee Roasters, Inc. is a small company that imports raw coffee beans from
around the world and roasts them to create a variety of gourmet coffees. Julie, the owner
of the company, has asked you to write a series of programs that she can use to manage her
inventory. After speaking with her, you have determined that a file is needed to keep inventory
records. Each record should have two fields to hold the following data:
• Description. A string containing the name of the coffee
• Quantity in inventory. The number of pounds in inventory, as a floating-point number

# This program adds coffee inventory records to
# the coffee.txt file.

def main():
    # Create a variable to control the loop.
    another = 'y'
    Open the coffee.txt file in append mode.
    coffee_file = open('coffee.txt', 'a')

    # Add records to the file.
    while another == 'y' or another == 'Y':
        # Get the coffee record data.
        print('Enter the following coffee data:')
        descr = input('Description: ')
        qty = int(input('Quantity (in pounds): '))

        # Append the data to the file.
        coffee_file.write(descr + '\n')
        coffee_file.write(str(qty) + '\n')

        # Determine whether the user wants to add another record to the file.
        print('Do you want to add another record?')
        another = input('Y = yes, anything else = no: ')

    # Close the file.
    coffee_file.close()
    print('Data appended to coffee.txt.')

# Call the main function.
main()

This program displays the records in the coffee.txt file.

def main():
    # Open the coffee.txt file.
    coffee_file = open('coffee.txt', 'r')

    # Read the first record's description field.
    descr = coffee_file.readline()

    # Read the rest of the file.
    while descr != '':
        # Read the quantity field.
        qty = float(coffee_file.readline())

        # Strip the \n from the description.
        descr = descr.rstrip('\n')

        # Display the record.
        print('Description:', descr)
        print('Quantity:', qty)

        # Read the next description.
        descr = coffee_file.readline()

    # Close the file.
    coffee_file.close()

# Call the main function.
main()

Searching for a Record
Julie has been using the first two programs that you wrote for her. She now has several
records stored in the coffee.txt file and has asked you to write another program that she
can use to search for records. She wants to be able to enter a description and see a list of
all the records matching that description.

# This program allows the user to search the coffee.txt file for records matching a description.

def main():
    # Create a bool variable to use as a flag.
    found = False

    # Get the search value.
    search = input('Enter a description to search for: ')

    # Open the coffee.txt file.
    coffee_file = open('coffee.txt', 'r')

    # Read the first record's description field.
    descr = coffee_file.readline()

    # Read the rest of the file.
    while descr != '':
        # Read the quantity field.
        qty = float(coffee_file.readline())

        # Strip the \n from the description.
        descr = descr.rstrip('\n')

        # Determine whether this record matches the search value.
        if descr == search:
            # Display the record.
            print('Description:', descr)
            print('Quantity:', qty)
            print()
            # Set the found flag to True.
            found = True

        # Read the next description.
        descr = coffee_file.readline()

    # Close the file.
    coffee_file.close()

    # If the search value was not found in the file display a message.
    if not found:
        print('That item was not found in the file.')

# Call the main function.
main()

Exceptions
An exception is an error that occurs while a program is running, causing
the program to abruptly halt. You can use the try/except statement to
gracefully handle exceptions.

def main():
Get two numbers.
num1 = int(input('Enter a number: '))
num2 = int(input('Enter another number: '))
# Divide num1 by num2 and display the result.
result = num1 / num2
print(num1, 'divided by', num2, 'is', result)

# Call the main function.
main()

Python, like most modern programming languages, allows you to write code that responds
to exceptions when they are raised, and prevents the program from abruptly crashing. Such
code is called an exception handler and is written with the try/except statement.

When the try/except statement executes, the statements in the try suite begin to execute.
The following describes what happens next:
• If a statement in the try suite raises an exception that is specified by the ExceptionName
in an except clause, then the handler that immediately follows the except clause
executes. Then, the program resumes execution with the statement immediately following
the try/except statement.
• If a statement in the try suite raises an exception that is not specified by the
ExceptionName in an except clause, then the program will halt with a traceback
error message.
• If the statements in the try suite execute without raising an exception, then any except
clauses and handlers in the statement are skipped, and the program resumes execution
with the statement immediately following the try/except statement.

Handling Multiple Exceptions
In many cases, the code in a try suite will be capable of throwing more than one type of
exception. In such a case, you need to write an except clause for each type of exception
that you want to handle.

def main():
# Initialize an accumulator.
    total = 0.0

    try:
        # Open the sales_data.txt file.
        infile = open('sales_data.txt', 'r')

    # Read the values from the file and accumulate them.
        for line in infile:
            amount = float(line)
            total += amount

        # Close the file.
        infile.close()

    # Print the total.
        print(format(total, ',.2f'))

    except IOError:
        print('An error occured trying to read the file.')

    except ValueError:
        print('Non-numeric data found in the file.')

    except:
        print('An error occured.')

# Call the main function.
main()